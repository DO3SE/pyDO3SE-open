# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import GenericRepr, Snapshot


snapshots = Snapshot()

snapshots['test_hourly_processes proccesses'] = [
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="===== Start of Hourly Processes (Hour: 0) ====="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set Hour"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'result.hr\': \'state.temporal.hr\'}; args=[])'),
    GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set data row index"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'row_index\': \'"row_index"\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.row_index\': \'state.temporal.row_index\'}; args=[])'),
    [
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set thermal time from external data"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.td.[row_index]\': \'td\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.td\': "state.f\'canopy_component.{iLC}.td"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set thermal time from external data"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.td.[row_index]\': \'td\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.td\': "state.f\'canopy_component.{iLC}.td"}; args=[])')
    ],
    [
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="===== Start of Daily Processes ====="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="set day"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'lget(e_state.dd\': \'row_index\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.dd\': \'state.temporal.dd\'}; args=[])'),
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Met Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        [
            GenericRepr('Process(func=calc_effective_temperature; ptype=ProcessType.STANDARD; comment="Calculate the effective temperature"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.t_b\': \'t_b\', \'config.Land_Cover.parameters.[iLC].pn_gsto.t_o\': \'t_o\', \'config.Land_Cover.parameters.[iLC].pn_gsto.t_m\': \'t_m\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.external_met.t_acc\': \'"t_acc"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.t_eff"}; args=[])'),
            GenericRepr('Process(func=calc_effective_temperature; ptype=ProcessType.STANDARD; comment="Calculate the effective temperature"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.t_b\': \'t_b\', \'config.Land_Cover.parameters.[iLC].pn_gsto.t_o\': \'t_o\', \'config.Land_Cover.parameters.[iLC].pn_gsto.t_m\': \'t_m\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.external_met.t_acc\': \'"t_acc"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.t_eff"}; args=[])')
        ],
        [
        ],
        GenericRepr('Process(func=calc_photoperiod; ptype=ProcessType.STANDARD; comment="Calculate the day length (photoperiod)"; gate=True; group=None; config_inputs={\'config.Location.lat\': \'lat\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\'}; state_outputs={\'result\': \'state.external_met.photoperiod\'}; args=[])'),
        [
        ],
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Phenology Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        [
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ],
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ],
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ],
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ],
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ],
            [
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_phen supplied (or left at default value of 1.0)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_phen"}; args=[])'),
                GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="calculate leaf_f_phen_method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
            ]
        ],
        [
            [
                [
                ],
                GenericRepr('Process(func=calc_phyllochron; ptype=ProcessType.STANDARD; comment="Calculate the phyllochron"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.prev_hour.external_met.photoperiod - state.external_met.photoperiod\': \'dl\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phyllochron"}; args=[])'),
                GenericRepr('Process(func=calc_rpe; ptype=ProcessType.STANDARD; comment="Calculate the relative photoperiod"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.p_crit\': \'p_crit\', \'config.Land_Cover.parameters.[iLC].pn_gsto.p_sens\': \'p_sens\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.external_met.photoperiod\': \'p\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.rpe"}; args=[])'),
                GenericRepr('Process(func=constant_plant_sown_check; ptype=ProcessType.STANDARD; comment="Set plant is sown when dd > sowing_day"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_dates.sowing\': \'sowing_day\', \'config.Land_Cover.parameters.[iLC].phenology.key_dates_td.sowing\': \'t_sowing\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td\': \'td\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'"phenology_stage"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])'),
                GenericRepr('Process(func=constant_plant_emerged_method; ptype=ProcessType.STANDARD; comment="Set plant has emerged when td > t_emerge or dd > emerge_day"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_dates_td.emergence\': \'t_emerge\', \'config.Land_Cover.parameters.[iLC].phenology.key_dates.emergence\': \'emerge_day\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td_v\': \'td\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'"phenology_stage"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])'),
                [
                ],
                [
                    GenericRepr('Process(func=calc_td_dd; ptype=ProcessType.STANDARD; comment="Get the difference between current td and td at Sowing(Vernalised if on)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_v"}; args=[])'),
                    GenericRepr('Process(func=calc_td_dd; ptype=ProcessType.STANDARD; comment="Get the difference between current td and td at emergence"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_dd"}; args=[])')
                ],
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Set flag leaf has emerged when td or dd pass flag leaf emergence date"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_lengths_flag_leaf.plant_emerg_to_leaf_emerg\': \'emerg\', \'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td_dd\': \'td\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.flag_has_emerged"}; args=[])'),
                GenericRepr('Process(func=calc_emergence_rate; ptype=ProcessType.STANDARD; comment="Calculate the emergence rate"; gate=False; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg_to_flag_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.emergence_rate"}; args=[])'),
                [
                    GenericRepr('Process(func=calc_emerged_leaf_count; ptype=ProcessType.STANDARD; comment="Calculate the number of leaf populations that have emerged"; gate=True; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'"t_emerge_flag"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td_dd\', \'state.canopy_component.[iLC].emergence_rate\': \'emergence_rate\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.total_emerged_leaf_populations"}; args=[])'),
                    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Set phenology stages"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_populations\', \'[state.canopy_component_population[iLC].\\n                   .[iP].phenology.phenology_stage for iP in range(nP)]\': \'phenology_stages\'}; state_outputs={\'stage\': "state.f\'canopy_component_population.{iLC}.{iP}.phenology.phenology_stage"}; args=[])')
                ],
                GenericRepr('Process(func=calc_td_dd_per_leaf_pop; ptype=ProcessType.STANDARD; comment="Calculate the thermal time difference between leaf pop emergence and current td"; gate=True; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg_to_flag_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td\', \'state.prev_hour.canopy_component.[iLC].td_dd\': \'td_prev\', \'state.prev_hour.canopy_component.[iLC].td_dd_leaf_pops\': \'td_dd_prev\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_leaf_count\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_dd_leaf_pops"}; args=[])'),
                [
                    [
                    ],
                    GenericRepr('Process(func=get_leaf_phenology_stage; ptype=ProcessType.STANDARD; comment="Get leaf phenology stage for flag leaf"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.tl_em\': \'"t_lem"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd_leaf_pops[-1]\': \'td_dd\', \'state.canopy_component_population.[iLC].[-1].t_lep_limited\': \'t_lep\', \'state.canopy_component_population.[iLC].[-1].t_lse_limited\': \'t_lse\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{-1}.phenology.phenology_stage"}; args=[])'),
                    GenericRepr('Process(func=get_plant_phenology_stage; ptype=ProcessType.STANDARD; comment="Get phenology stage for plant"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_td\': \'"key_lengths"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td_dd\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'phenology_stage\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])')
                ],
                [
                    GenericRepr('Process(func=get_growing_populations; ptype=ProcessType.STANDARD; comment="Define which populations are growing"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.tl_em\': \'"flag_leaf_t_lem"\', \'[config.Land_Cover.parameters[iLC].phenology.key_lengths_leaf_td.tl_em for _ in range(\\n                    nP - 1)]\': \'"leaf_population_t_lems"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd_leaf_pops\': \'td_dd_emerg\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.growing_populations"}; args=[])')
                ]
            ],
            [
                [
                ],
                GenericRepr('Process(func=calc_phyllochron; ptype=ProcessType.STANDARD; comment="Calculate the phyllochron"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.prev_hour.external_met.photoperiod - state.external_met.photoperiod\': \'dl\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phyllochron"}; args=[])'),
                GenericRepr('Process(func=calc_rpe; ptype=ProcessType.STANDARD; comment="Calculate the relative photoperiod"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.p_crit\': \'p_crit\', \'config.Land_Cover.parameters.[iLC].pn_gsto.p_sens\': \'p_sens\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.external_met.photoperiod\': \'p\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.rpe"}; args=[])'),
                GenericRepr('Process(func=constant_plant_sown_check; ptype=ProcessType.STANDARD; comment="Set plant is sown when dd > sowing_day"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_dates.sowing\': \'sowing_day\', \'config.Land_Cover.parameters.[iLC].phenology.key_dates_td.sowing\': \'t_sowing\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td\': \'td\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'"phenology_stage"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])'),
                GenericRepr('Process(func=constant_plant_emerged_method; ptype=ProcessType.STANDARD; comment="Set plant has emerged when td > t_emerge or dd > emerge_day"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_dates_td.emergence\': \'t_emerge\', \'config.Land_Cover.parameters.[iLC].phenology.key_dates.emergence\': \'emerge_day\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td_v\': \'td\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'"phenology_stage"\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])'),
                [
                ],
                [
                    GenericRepr('Process(func=calc_td_dd; ptype=ProcessType.STANDARD; comment="Get the difference between current td and td at Sowing(Vernalised if on)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_v"}; args=[])'),
                    GenericRepr('Process(func=calc_td_dd; ptype=ProcessType.STANDARD; comment="Get the difference between current td and td at emergence"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_dd"}; args=[])')
                ],
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Set flag leaf has emerged when td or dd pass flag leaf emergence date"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_lengths_flag_leaf.plant_emerg_to_leaf_emerg\': \'emerg\', \'config.Land_Cover.parameters.[iLC].\\n                      .phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.[iLC].td_dd\': \'td\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.flag_has_emerged"}; args=[])'),
                GenericRepr('Process(func=calc_emergence_rate; ptype=ProcessType.STANDARD; comment="Calculate the emergence rate"; gate=False; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg_to_flag_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.emergence_rate"}; args=[])'),
                [
                    GenericRepr('Process(func=calc_emerged_leaf_count; ptype=ProcessType.STANDARD; comment="Calculate the number of leaf populations that have emerged"; gate=True; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'"t_emerge_flag"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td_dd\', \'state.canopy_component.[iLC].emergence_rate\': \'emergence_rate\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.total_emerged_leaf_populations"}; args=[])'),
                    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Set phenology stages"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_populations\', \'[state.canopy_component_population[iLC].\\n                   .[iP].phenology.phenology_stage for iP in range(nP)]\': \'phenology_stages\'}; state_outputs={\'stage\': "state.f\'canopy_component_population.{iLC}.{iP}.phenology.phenology_stage"}; args=[])')
                ],
                GenericRepr('Process(func=calc_td_dd_per_leaf_pop; ptype=ProcessType.STANDARD; comment="Calculate the thermal time difference between leaf pop emergence and current td"; gate=True; group=None; config_inputs={\'config.Land_Cover.nP\': \'nP\', \'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.plant_emerg_to_leaf_emerg\': \'t_emerg_to_flag_emerg\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td\', \'state.prev_hour.canopy_component.[iLC].td_dd\': \'td_prev\', \'state.prev_hour.canopy_component.[iLC].td_dd_leaf_pops\': \'td_dd_prev\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_leaf_count\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.td_dd_leaf_pops"}; args=[])'),
                [
                    [
                    ],
                    GenericRepr('Process(func=get_leaf_phenology_stage; ptype=ProcessType.STANDARD; comment="Get leaf phenology stage for flag leaf"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.tl_em\': \'"t_lem"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd_leaf_pops[-1]\': \'td_dd\', \'state.canopy_component_population.[iLC].[-1].t_lep_limited\': \'t_lep\', \'state.canopy_component_population.[iLC].[-1].t_lse_limited\': \'t_lse\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{-1}.phenology.phenology_stage"}; args=[])'),
                    GenericRepr('Process(func=get_plant_phenology_stage; ptype=ProcessType.STANDARD; comment="Get phenology stage for plant"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_td\': \'"key_lengths"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd\': \'td_dd\', \'state.canopy_component.[iLC].phenology.phenology_stage\': \'phenology_stage\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.phenology.phenology_stage"}; args=[])')
                ],
                [
                    GenericRepr('Process(func=get_growing_populations; ptype=ProcessType.STANDARD; comment="Define which populations are growing"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].phenology.key_lengths_flag_leaf_td.tl_em\': \'"flag_leaf_t_lem"\', \'[config.Land_Cover.parameters[iLC].phenology.key_lengths_leaf_td.tl_em for _ in range(\\n                    nP - 1)]\': \'"leaf_population_t_lems"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].td_dd_leaf_pops\': \'td_dd_emerg\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.growing_populations"}; args=[])')
                ]
            ]
        ],
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Carbon Allocation Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        [
            [
                GenericRepr('Process(func=daily_carbon_allocation; ptype=ProcessType.STANDARD; comment="Calculate the daily carbon allocation"; gate=True; group=None; config_inputs={\'config.carbon_allocation.a_root\': \'a_root\', \'config.carbon_allocation.a_stem\': \'a_stem\', \'config.carbon_allocation.a_leaf\': \'a_leaf\', \'config.carbon_allocation.b_root\': \'b_root\', \'config.carbon_allocation.b_stem\': \'b_stem\', \'config.carbon_allocation.b_leaf\': \'b_leaf\', \'config.carbon_allocation.theta\': \'theta\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].npp_acc\': \'net_prod_acc\', \'state.canopy_component.[iLC].dvi\': \'DVI\', \'state.canopy_component.[iLC].c_root\': \'c_root\', \'state.canopy_component.[iLC].c_stem\': \'c_stem\', \'state.canopy_component.[iLC].c_leaf\': \'c_leaf\', \'state.canopy_component.[iLC].c_harv\': \'c_harv\', \'state.canopy_component.[iLC].c_resv\': \'c_resv\'}; state_outputs={\'result.c_root\': "state.f\'canopy_component.{iLC}.c_root", \'result.c_stem\': "state.f\'canopy_component.{iLC}.c_stem", \'result.c_leaf\': "state.f\'canopy_component.{iLC}.c_leaf", \'result.c_harv\': "state.f\'canopy_component.{iLC}.c_harv", \'result.c_resv\': "state.f\'canopy_component.{iLC}.c_resv"}; args=[])'),
                GenericRepr('Process(func=daily_carbon_allocation; ptype=ProcessType.STANDARD; comment="Calculate the daily carbon allocation"; gate=True; group=None; config_inputs={\'config.carbon_allocation.a_root\': \'a_root\', \'config.carbon_allocation.a_stem\': \'a_stem\', \'config.carbon_allocation.a_leaf\': \'a_leaf\', \'config.carbon_allocation.b_root\': \'b_root\', \'config.carbon_allocation.b_stem\': \'b_stem\', \'config.carbon_allocation.b_leaf\': \'b_leaf\', \'config.carbon_allocation.theta\': \'theta\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].npp_acc\': \'net_prod_acc\', \'state.canopy_component.[iLC].dvi\': \'DVI\', \'state.canopy_component.[iLC].c_root\': \'c_root\', \'state.canopy_component.[iLC].c_stem\': \'c_stem\', \'state.canopy_component.[iLC].c_leaf\': \'c_leaf\', \'state.canopy_component.[iLC].c_harv\': \'c_harv\', \'state.canopy_component.[iLC].c_resv\': \'c_resv\'}; state_outputs={\'result.c_root\': "state.f\'canopy_component.{iLC}.c_root", \'result.c_stem\': "state.f\'canopy_component.{iLC}.c_stem", \'result.c_leaf\': "state.f\'canopy_component.{iLC}.c_leaf", \'result.c_harv\': "state.f\'canopy_component.{iLC}.c_harv", \'result.c_resv\': "state.f\'canopy_component.{iLC}.c_resv"}; args=[])')
            ],
            [
                GenericRepr('Process(func=calc_LAI_from_DVI_and_carbon; ptype=ProcessType.STANDARD; comment="Calculate the plant LAI from accumulated carbon"; gate=True; group=None; config_inputs={\'config.carbon_allocation.gamma\': \'gamma\', \'config.carbon_allocation.delta\': \'delta\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].dvi\': \'DVI\', \'state.canopy_component.[iLC].c_leaf\': \'c_leaf\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_leaf_count\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.LAI"}; args=[])'),
                GenericRepr('Process(func=calc_LAI_from_DVI_and_carbon; ptype=ProcessType.STANDARD; comment="Calculate the plant LAI from accumulated carbon"; gate=True; group=None; config_inputs={\'config.carbon_allocation.gamma\': \'gamma\', \'config.carbon_allocation.delta\': \'delta\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].dvi\': \'DVI\', \'state.canopy_component.[iLC].c_leaf\': \'c_leaf\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'emerged_leaf_count\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.LAI"}; args=[])')
            ],
            [
                [
                    GenericRepr('Process(func=get_plant_height_from_carbon; ptype=ProcessType.STANDARD; comment="Calculate the plant height from accumulated carbon"; gate=True; group=None; config_inputs={\'config.carbon_allocation.k\': \'k\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].c_stem\': \'c_stem\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.plant_height"}; args=[])')
                ],
                [
                    GenericRepr('Process(func=get_plant_height_from_carbon; ptype=ProcessType.STANDARD; comment="Calculate the plant height from accumulated carbon"; gate=True; group=None; config_inputs={\'config.carbon_allocation.k\': \'k\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].c_stem\': \'c_stem\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.plant_height"}; args=[])')
                ]
            ],
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="reset daily carbon accumulators"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'0\': "state.f\'canopy_component.{iLC}.npp_acc\') for iLC in range(nLC"}; args=[])')
        ],
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Canopy Structure Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        [
            GenericRepr('Process(func=height_method_constant; ptype=ProcessType.STANDARD; comment="Use height of primary land cover if height method is constant"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[config.Land_Cover.primary_LC].height\': \'primary_land_cover_height\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'result\': \'state.canopy.canopy_height\'}; args=[])'),
            [
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Calculate height of top of each layer as a fraction of total canopy height"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'canopy_height\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_depth"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Calculate height of top of each layer as a fraction of total canopy height"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'canopy_height\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_depth"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Calculate height of top of each layer as a fraction of total canopy height"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'canopy_height\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_depth"}; args=[])')
            ],
            [
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Get layer height as sum of layer depths below"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[jL].layer_depth for jL in range(iL + 1)]\': \'layer_depths\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_height"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Get layer height as sum of layer depths below"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[jL].layer_depth for jL in range(iL + 1)]\': \'layer_depths\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_height"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Get layer height as sum of layer depths below"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[jL].layer_depth for jL in range(iL + 1)]\': \'layer_depths\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.layer_height"}; args=[])')
            ]
        ],
        [
            GenericRepr('Process(func=LAI_method_estimate_canopy_total; ptype=ProcessType.STANDARD; comment="Use primary land cover\'s estimate of total LAI and spread over\n                        layers and LCs"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.0.phenology.LAI_1\': \'LAI_1\', \'config.Land_Cover.parameters.0.phenology.LAI_2\': \'LAI_2\', \'config.Land_Cover.parameters.0.phenology.LAI_a\': \'LAI_a\', \'config.Land_Cover.parameters.0.phenology.LAI_b\': \'LAI_b\', \'config.Land_Cover.parameters.0.phenology.LAI_c\': \'LAI_c\', \'config.Land_Cover.parameters.0.phenology.LAI_d\': \'LAI_d\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.temporal.dd\': \'dd\', \'state.canopy_component.0.SGS\': \'SGS\', \'state.canopy_component.0.EGS\': \'EGS\'}; state_outputs={\'result\': \'state.canopy_component.0.LAI\'}; args=[])')
        ],
        [
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Distribute LAI using constant fractions from config"; gate=True; group=None; config_inputs={\'config.Land_Cover.fLAI\': \'"fLAIs"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.LAI_total\': \'"LAI"\'}; state_outputs={\'result.[iL].[iLC]\': "state.f\'canopy_layer_component.{iL}.{iLC}.LAI"}; args=[])'),
            [
                GenericRepr('Process(func=calc_distribution_of_LAI_between_lcs; ptype=ProcessType.STANDARD; comment="Calculate the distribution of LAI between land covers"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.nLC\': \'nLC\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[[state.canopy_layer_component[jL].[jLC].LAI for jL in range(nL)]\\n                   for jLC in range(nLC)]\': \'LAI_values\'}; state_outputs={\'result.[iLC]\': "state.f\'canopy_component.{iLC}.LC_dist"}; args=[])'),
                GenericRepr('Process(func=calc_distribution_of_LAI_between_lcs; ptype=ProcessType.STANDARD; comment="Calculate the distribution of LAI between land covers"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.nLC\': \'nLC\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[[state.canopy_layer_component[jL].[jLC].LAI for jL in range(nL)]\\n                   for jLC in range(nLC)]\': \'LAI_values\'}; state_outputs={\'result.[iLC]\': "state.f\'canopy_component.{iLC}.LC_dist"}; args=[])')
            ],
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="get layer LAI-weighted mean leaf width(Lm_LAI)"; gate=True; group=None; config_inputs={\'[config.Land_Cover.parameters[iLC].Lm for iLC in range(nLC)]\': \'LCPs\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_component[iLC].LC_dist for iLC in range(nLC)]\': \'MCs\'}; state_outputs={\'result\': \'state.canopy.Lm_LAI\'}; args=[])')
        ],
        [
            [
                GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Calc_SAI Estimate_total - LAI"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.LAI_total\': \'LAI_total\'}; state_outputs={\'result.LAI_total\': \'state.canopy.SAI_total\'}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Spread single SAI value to layers and LCs"; gate=True; group=None; config_inputs={\'config.Land_Cover.fLAI\': \'fLAI\', \'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.nLC\': \'nLC\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.SAI_total\': \'SAI\'}; state_outputs={\'result.[iL].[iLC]\': "state.f\'canopy_layer_component.{iL}.{iLC}.SAI"}; args=[])')
            ],
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="get layer SAI_total"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[[state.canopy_layer_component[iL].[iLC].SAI for iL in range(nL)]\\n                       for iLC in range(nLC)]\': \'SAI_values\'}; state_outputs={\'result\': \'state.canopy.SAI_total\'}; args=[])')
        ],
        [
            [
                GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set leaf lai for single population"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layer_component[iL].[iLC].LAI for iL in range(nL)]\': \'"layers_lai"\'}; state_outputs={\'[[result["layers_lai"].[iL]. for iP in range(nP)]\\n                      for iL in range(nL)]\': \'state.f"canopy_component.{iLC}.leaf_pop_distribution"\', \'sum(result.["layers_lai"].)\': "state.f\'canopy_component_population.{iLC}.0.LAI"}; args=[])'),
                GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set leaf lai for single population"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layer_component[iL].[iLC].LAI for iL in range(nL)]\': \'"layers_lai"\'}; state_outputs={\'[[result["layers_lai"].[iL]. for iP in range(nP)]\\n                      for iL in range(nL)]\': \'state.f"canopy_component.{iLC}.leaf_pop_distribution"\', \'sum(result.["layers_lai"].)\': "state.f\'canopy_component_population.{iLC}.0.LAI"}; args=[])')
            ],
            [
                GenericRepr('Process(func=calc_leaf_pops_per_layer; ptype=ProcessType.STANDARD; comment="Distribute lai between leaf populations"; gate=False; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.prev_hour.canopy_component.[iLC].leaf_pop_distribution\': \'"prev_leaf_pops_per_lai"\', \'state.canopy_component.[iLC].LAI\': \'"canopy_lai"\', \'[state.canopy_layer_component[iL].[iLC].LAI for iL in range(nL)]\': \'"layers_lai"\', \'state.canopy_component.[iLC].growing_populations\': \'"growing_populations"\'}; state_outputs={\'UNKNOWN\': \'UNKNOWN\'}; args=[])'),
                GenericRepr('Process(func=calc_leaf_pops_per_layer; ptype=ProcessType.STANDARD; comment="Distribute lai between leaf populations"; gate=False; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.prev_hour.canopy_component.[iLC].leaf_pop_distribution\': \'"prev_leaf_pops_per_lai"\', \'state.canopy_component.[iLC].LAI\': \'"canopy_lai"\', \'[state.canopy_layer_component[iL].[iLC].LAI for iL in range(nL)]\': \'"layers_lai"\', \'state.canopy_component.[iLC].growing_populations\': \'"growing_populations"\'}; state_outputs={\'UNKNOWN\': \'UNKNOWN\'}; args=[])')
            ],
            [
                GenericRepr('Process(func=distribute_canopy_lai_to_leaf_pops; ptype=ProcessType.STANDARD; comment="Distribute lai between growing leaf populations using multiplicative method"; gate=False; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].LAI\': \'"canopy_lai"\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'no_emerged_pops\'}; state_outputs={\'UNKNOWN\': \'UNKNOWN\'}; args=[])'),
                GenericRepr('Process(func=distribute_canopy_lai_to_leaf_pops; ptype=ProcessType.STANDARD; comment="Distribute lai between growing leaf populations using multiplicative method"; gate=False; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].LAI\': \'"canopy_lai"\', \'state.canopy_component.[iLC].total_emerged_leaf_populations\': \'no_emerged_pops\'}; state_outputs={\'UNKNOWN\': \'UNKNOWN\'}; args=[])')
            ],
            [
                GenericRepr('Process(func=get_multi_layer_leaf_pop_fractions; ptype=ProcessType.STANDARD; comment="Convert lai distribution to pop fractions"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].leaf_pop_distribution\': \'"leaf_pop_distribution"\'}; state_outputs={}; args=[])'),
                GenericRepr('Process(func=get_multi_layer_leaf_pop_fractions; ptype=ProcessType.STANDARD; comment="Convert lai distribution to pop fractions"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'"nL"\', \'config.Land_Cover.nP\': \'"nP"\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component.[iLC].leaf_pop_distribution\': \'"leaf_pop_distribution"\'}; state_outputs={}; args=[])')
            ]
        ],
        GenericRepr('Process(func=calc_displacement_and_roughness_parameters; ptype=ProcessType.STANDARD; comment="calculate measured wind canopy displacement parameters"; gate=True; group=None; config_inputs={\'ERROR\': \'ERROR\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'"h"\'}; state_outputs={\'result.0\': \'state.canopy.d\', \'result.1\': \'state.canopy.z0\'}; args=[])'),
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Soil Moisture Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Accumulate precipitation"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={\'0\': \'precip_acc_dd\'}; state_inputs={\'state.canopy.PM.precip_acc_dd\': \'precip_acc_prev_day\'}; state_outputs={\'result.precip_acc_dd\': \'state.canopy.PM.precip_acc_dd\', \'result.precip_acc_prev_day\': \'state.canopy.PM.precip_acc_prev_day\'}; args=[])'),
        [
        ],
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Fst Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        [
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate O3up(fst)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].O3up_acc_day\': \'O3up\', \'state.canopy_component_population.[iLC].[iP].O3up_acc_day_prev\': \'O3up_prev\', \'state.canopy_component_population.[iLC].[iP].O3up_acc\': \'O3up_acc\', \'state.canopy_component.[iLC].td_dd_leaf_pops.[iP]\': \'td_dd\', \'state.prev_hour.canopy_component.[iLC].td_dd_leaf_pops.[iP]\': \'td_dd_prev\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc"}; args=[])'),
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate O3up(fst)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].O3up_acc_day\': \'O3up\', \'state.canopy_component_population.[iLC].[iP].O3up_acc_day_prev\': \'O3up_prev\', \'state.canopy_component_population.[iLC].[iP].O3up_acc\': \'O3up_acc\', \'state.canopy_component.[iLC].td_dd_leaf_pops.[iP]\': \'td_dd\', \'state.prev_hour.canopy_component.[iLC].td_dd_leaf_pops.[iP]\': \'td_dd_prev\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc"}; args=[])')
        ],
        [
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Store the O3up_acc_day from previous day and reset current day to 0."; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].O3up_acc_day\': \'O3up\'}; state_outputs={"result[\'O3up\']": "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day_prev", \'0\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day"}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Store the O3up_acc_day from previous day and reset current day to 0."; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].O3up_acc_day\': \'O3up\'}; state_outputs={"result[\'O3up\']": "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day_prev", \'0\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day"}; args=[])')
        ],
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="===== End of Daily Processes ====="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
    ],
    GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="Disabled - Nothing to do"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Met Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate daily temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'t\'}; additional_inputs={}; state_inputs={\'state.temporal.hr\': \'hr\', \'state.external_met.t_acc\': \'t_acc\'}; state_outputs={\'result\': \'state.external_met.t_acc\'}; args=[])'),
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate precipitation"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.precip.[row_index]\': \'precip_mm\'}; additional_inputs={}; state_inputs={\'state.canopy.PM.precip_acc_dd\': \'precip_acc_dd\'}; state_outputs={\'result\': \'state.canopy.PM.precip_acc_dd\'}; args=[])'),
    [
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])'),
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])'),
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])'),
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])'),
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])'),
        GenericRepr('Process(func=calc_PAR_sun_shade_farq_b; ptype=ProcessType.STANDARD; comment="calculate PAR_sun_shade using Farquhar 1997 method"; gate=True; group=None; config_inputs={\'sum(.[config.Land_Cover.parameters[jLC].cosA for jLC in range(nLC)]) / nLC\': \'cosA\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\', \'lget(e_state.Idrctt\': \'row_index\', \'lget(e_state.Idfuse\': \'row_index\'}; additional_inputs={}; state_inputs={\'sum(.[state.canopy_layer_component[jL].[jLC].LAI for jLC in range(nLC\': None}; state_outputs={\'result.PARsun\': "state.f\'canopy_layers.{iL}.micro_met.PARsun", \'result.PARshade\': "state.f\'canopy_layers.{iL}.micro_met.PARshade"}; args=[])')
    ],
    GenericRepr('Process(func=MLMC_sunlit_LAI; ptype=ProcessType.STANDARD; comment="Estimate sunlit LAI fractions"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.nLC\': \'nLC\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.sinB\': \'row_index\'}; additional_inputs={}; state_inputs={\'[[state.canopy_layer_component[iL].[iLC].LAI for iLC in range(nLC)]\\n               for iL in reversed(range(nL))]\': \'LAI\'}; state_outputs={\'list(reversed(result)).[iL].[iLC]\': "state.f\'canopy_layer_component.{iL}.{iLC}.LAIsunfrac"}; args=[])'),
    [
        GenericRepr('Process(func=calc_ustar_and_L; ptype=ProcessType.STANDARD; comment="Calculate ustar_ref and monin obukhov length"; gate=False; group=None; config_inputs={\'config.Location.z_u\': \'z_u\', \'config.Location.u_d\': \'u_d\', \'config.Location.u_z0\': \'u_z0\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.Hd\': \'row_index\', \'lget(e_state.P\': \'row_index\', \'e_state.Ts_C.[row_index]. + T0\': \'Tk\', \'e_state.ustar_ref.[row_index]\': \'ustar_ref_in\'}; additional_inputs={}; state_inputs={\'state.met.u_i\': \'u\'}; state_outputs={\'result.0\': \'state.met.ustar_ref\', \'result.1\': \'state.met.L\'}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Set ustar_ref to external input"; gate=False; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.ustar_ref.[row_index]\': \'ustar_ref_in\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.ustar_ref_in\': \'state.met.ustar_ref\', \'None\': \'state.met.L\'}; args=[])'),
        GenericRepr('Process(func=ustar_from_velocity_simple; ptype=ProcessType.STANDARD; comment="Calculate ustar_ref using simple method"; gate=True; group=None; config_inputs={\'config.Location.z_u - config.Location.u_d\': \'z\', \'config.Location.u_z0\': \'z0\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result\': \'state.met.ustar_ref\', \'None\': \'state.met.L\'}; args=[])'),
        GenericRepr('Process(func=ustar_from_velocity_simple; ptype=ProcessType.STANDARD; comment="Calculate ustar_ref using simple method"; gate=False; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height - state.canopy.d\': \'z\', \'state.canopy.z0\': \'z0\'}; state_outputs={\'result\': \'state.met.ustar_ref\', \'None\': \'state.met.L\'}; args=[])')
    ],
    GenericRepr('Process(func=calc_windspeed; ptype=ProcessType.STANDARD; comment="Calculate estimated windspeed at canopy"; gate=True; group=None; config_inputs={\'config.Location.OTC\': \'o_top_chamber\', \'config.Location.z_u\': \'z_u\', \'config.Location.u_z0\': \'u_z0\', \'config.Location.u_d\': \'u_d\', \'config.Location.izr\': \'izr\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'0.1\': \'min_windspeed\'}; state_inputs={\'state.canopy.canopy_height\': \'h\', \'state.canopy.d\': \'d\', \'state.canopy.z0\': \'z0\', \'state.met.L\': \'L\', \'state.met.ustar_ref\': \'ustar_ref\'}; state_outputs={\'result.u_i\': \'state.met.u_i\', \'result.ustar\': \'state.met.ustar\'}; args=[])'),
    [
        GenericRepr('Process(func=calc_layer_windspeed; ptype=ProcessType.STANDARD; comment="Set constant wind speed at each layer"; gate=True; group=None; config_inputs={\'config.Location.OTC\': \'o_top_chamber\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'h\', \'state.canopy.Lm_LAI\': \'w\', \'state.canopy.SAI_total\': \'SAI\', \'state.canopy.met.micro_u\': \'u_at_canopy_top\', \'state.canopy_layers.[iL].layer_height\': \'z\', \'state.canopy_layers.[iL].layer_depth\': \'layer_depth\', \'0\': \'layer_depth\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_u"}; args=[])'),
        GenericRepr('Process(func=calc_layer_windspeed; ptype=ProcessType.STANDARD; comment="Set constant wind speed at each layer"; gate=True; group=None; config_inputs={\'config.Location.OTC\': \'o_top_chamber\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'h\', \'state.canopy.Lm_LAI\': \'w\', \'state.canopy.SAI_total\': \'SAI\', \'state.canopy.met.micro_u\': \'u_at_canopy_top\', \'state.canopy_layers.[iL].layer_height\': \'z\', \'state.canopy_layers.[iL].layer_depth\': \'layer_depth\', \'0\': \'layer_depth\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_u"}; args=[])'),
        GenericRepr('Process(func=calc_layer_windspeed; ptype=ProcessType.STANDARD; comment="Set constant wind speed at each layer"; gate=True; group=None; config_inputs={\'config.Location.OTC\': \'o_top_chamber\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.canopy_height\': \'h\', \'state.canopy.Lm_LAI\': \'w\', \'state.canopy.SAI_total\': \'SAI\', \'state.canopy.met.micro_u\': \'u_at_canopy_top\', \'state.canopy_layers.[iL].layer_height\': \'z\', \'state.canopy_layers.[iL].layer_depth\': \'layer_depth\', \'0\': \'layer_depth\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_u"}; args=[])')
    ],
    [
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Use air temperature"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Tleaf_C\'}; additional_inputs={}; state_inputs={}; state_outputs={\'result.Tleaf_C\': "state.f\'canopy_layer_component_pop.{iL}.{iLC}.{iP}.Tleaf_C_estimate"}; args=[])')
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Gsto Setup Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="V_cmax_25 and J_max_25 supplied as constant"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.V_cmax_25\': \'V_cmax_25\', \'config.Land_Cover.parameters.[iLC].pn_gsto.J_max_25\': \'J_max_25\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={"result[\'V_cmax_25\']": "state.f\'canopy_component_population.{iLC}.{iP}.V_cmax_25", "result[\'J_max_25\']": "state.f\'canopy_component_population.{iLC}.{iP}.J_max_25"}; args=[])'),
        GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="V_cmax_25 and J_max_25 supplied as constant"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].pn_gsto.V_cmax_25\': \'V_cmax_25\', \'config.Land_Cover.parameters.[iLC].pn_gsto.J_max_25\': \'J_max_25\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={"result[\'V_cmax_25\']": "state.f\'canopy_component_population.{iLC}.{iP}.V_cmax_25", "result[\'J_max_25\']": "state.f\'canopy_component_population.{iLC}.{iP}.J_max_25"}; args=[])')
    ],
    [
        [
        ],
        [
        ]
    ],
    [
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ],
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ],
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ],
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ],
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ],
        [
            [
            ],
            [
            ],
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_VPD method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="f_SWP_method - Disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={\'1.0\': "state.f\'canopy_layer_component.{iL}.{iLC}.gsto_params.f_SW"}; args=[])'),
            GenericRepr('Process(func=skip; ptype=ProcessType.STANDARD; comment="f_O3 method - disabled"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
            GenericRepr('Process(func=calc_g_bv; ptype=ProcessType.STANDARD; comment="Calculate g_bv for photosynthesis"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.u\': \'row_index\'}; additional_inputs={\'GAS.H2O\': \'gas\'}; state_inputs={}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.g_bv_H2O"}; args=[])')
        ]
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Gsto Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
        [
            [
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])'),
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])'),
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])')
            ],
            [
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])')
            ],
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale bulk gsto to canopy gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layer_component[iL].[iLC].bulk_gsto for iL in range(nL)]\': \'bulk_gsto\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.canopy_gsto"}; args=[])'),
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].mean_gsto_per_layer\': \'mean_gsto\', \'[state.canopy_component[iLC].leaf_pop_distribution.[iL].[iP].\\n               for iL in range(nL)]\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.bulk_gsto_per_layer"}; args=[])')
        ],
        [
            [
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])'),
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])'),
                GenericRepr('Process(func=multiplicative; ptype=ProcessType.STANDARD; comment="Calculate gsto - multiplicative"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].gsto.VPD_crit\': \'VPD_crit\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmax\': \'gmax\', \'config.Land_Cover.parameters.[iLC].multip_gsto.gmorph\': \'gmorph\', \'config.Land_Cover.parameters.[iLC].gsto.fmin\': \'fmin\'}; parameters_inputs={}; external_state_inputs={\'e_state.VPD_dd.[row_index]\': \'VPD_dd\'}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer.[iL]\': \'initial_leaf_gsto\', \'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'initial_mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_light\': \'f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.leaf_f_light\': \'leaf_f_light\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_temp\': \'f_temp\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_VPD\': \'f_VPD\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_SW\': \'f_SW\', \'state.canopy_layer_component.[iL].[iLC].gsto_params.f_O3\': \'f_O3\'}; state_outputs={\'result.new_leaf_gsto\': "state.f\'canopy_component_population.{iLC}.{iP}.mean_gsto_per_layer.{iL}", \'result.new_mean_gsto\': "state.f\'canopy_layer_component.{iL}.{iLC}.mean_gsto"}; args=[])')
            ],
            [
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])'),
                GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layer_component.[iL].[iLC].mean_gsto\': \'mean_gsto\', \'state.canopy_layer_component.[iL].[iLC].LAI\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_layer_component.{iL}.{iLC}.bulk_gsto"}; args=[])')
            ],
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale bulk gsto to canopy gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layer_component[iL].[iLC].bulk_gsto for iL in range(nL)]\': \'bulk_gsto\'}; state_outputs={\'result\': "state.f\'canopy_component.{iLC}.canopy_gsto"}; args=[])'),
            GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Scale mean gsto up to bulk gsto"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_component_population.[iLC].[iP].mean_gsto_per_layer\': \'mean_gsto\', \'[state.canopy_component[iLC].leaf_pop_distribution.[iL].[iP].\\n               for iL in range(nL)]\': \'LAI\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.bulk_gsto_per_layer"}; args=[])')
        ]
    ],
    [
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Ozone Deposition Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    GenericRepr('Process(func=calc_resistance_model; ptype=ProcessType.STANDARD; comment="Reset and Calculate the resistance model for O3 over the target canopy"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.nLC\': \'nLC\', \'config.Location.Rsoil\': \'Rsoil\', \'ra_calc_method\': \'ra_calc_method\', \'rsur_calc_method\': \'rsur_calc_method\', \'rext_calc_method\': \'rext_calc_method\'}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Ts_C\', \'lget(e_state.Hd\': \'row_index\', \'e_state.snow_depth.[row_index]\': \'snow_depth\', \'lget(e_state.P\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.met.ustar\': \'ustar\', \'state.canopy.canopy_height\': \'canopy_height\', \'[[state.canopy_layer_component[iL].[iLC].SAI for iLC in range(nLC)]\\n               for iL in range(nL)]\': \'SAI_values\', \'[[state.canopy_layer_component[iL].[iLC].LAI for iLC in range(nLC)]\\n               for iL in range(nL)]\': \'LAI_values\', \'[[state.canopy_layer_component[iL].[iLC].mean_gsto for iLC in range(nLC)]\\n               for iL in range(nL)]\': \'mean_gsto_values\', \'[[state.canopy_layer_component[iL].[iLC].bulk_gsto for iLC in range(nLC)]\\n            #    for iL in range(nL)]\': \'bulk_gsto_values\'}; state_outputs={\'result\': \'state.canopy.rmodel_O3\'}; args=[])'),
    GenericRepr('Process(func=calc_deposition_velocity; ptype=ProcessType.STANDARD; comment="Vd calculation duplicated here just for comparison purposes"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy.rmodel_O3.Ra_c\': \'rmodel_Ra_c\', \'state.canopy.rmodel_O3.Rtotal.0\': \'rmodel_Rtotal_top_layer\'}; state_outputs={\'result\': \'state.canopy.Vd\'}; args=[])'),
    [
    ],
    GenericRepr('Process(func=calc_canopy_ozone_concentration; ptype=ProcessType.STANDARD; comment="Calculate Top Layer Canopy ozone"; gate=True; group=None; config_inputs={\'config.Location.z_O3\': \'z_O3\', \'config.Location.O3_d\': \'O3_d\', \'config.Location.O3_z0\': \'O3_z0\', \'config.Location.izr\': \'izr\', \'config.resistance.ra_calc_method\': \'ra_method\'}; parameters_inputs={}; external_state_inputs={\'lget(e_state.O3\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.canopy.rmodel_O3.Rsur.[top_layer_index]\': \'Rsur_top_layer\', \'state.canopy.rmodel_O3.Rb\': \'Rb_top_layer\', \'state.canopy.rmodel_O3.Ra\': \'Ra_top_layer\', \'state.met.ustar\': \'ustar\', \'state.met.ustar_ref\': \'ustar_ref\', \'state.met.L\': \'L\', \'state.canopy.d\': \'d\', \'state.canopy.z0\': \'z0\'}; state_outputs={\'result.O3_i\': \'state.met.O3_i\', \'result.micro_O3\': "state.f\'canopy_layers.{top_layer_index}.micro_met.micro_O3"}; args=[])'),
    GenericRepr('Process(func=calc_multi_layer_O3_ozone_concentration; ptype=ProcessType.STANDARD; comment="Calculate Ozone concentration for other layers"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state.canopy_layers.[top_layer_index].micro_met.micro_O3\': \'O3_in\', \'0\': \'rm_Ra\', \'state.canopy.rmodel_O3.Ra\': \'rm_Ra\', \'list(reversed(state.canopy.rmodel_O3.Rinc)\': None, \'list(reversed(state.canopy.rmodel_O3.Rsur)\': None, \'state.canopy.rmodel_O3.Rgs\': \'rm_Rgs\'}; state_outputs={\'list(reversed(result)).[iL]\': "state.f\'canopy_layers.{iL}.micro_met.micro_O3"}; args=[])'),
    [
        GenericRepr('Process(func=O3_ppb_to_nmol; ptype=ProcessType.STANDARD; comment="Convert O3 ppb to O3 nmol"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Ts_C\', \'lget(e_state.P\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.canopy_layers.[iL].micro_met.micro_O3\': \'O3_ppb\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_O3_nmol_m3"}; args=[])'),
        GenericRepr('Process(func=O3_ppb_to_nmol; ptype=ProcessType.STANDARD; comment="Convert O3 ppb to O3 nmol"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Ts_C\', \'lget(e_state.P\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.canopy_layers.[iL].micro_met.micro_O3\': \'O3_ppb\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_O3_nmol_m3"}; args=[])'),
        GenericRepr('Process(func=O3_ppb_to_nmol; ptype=ProcessType.STANDARD; comment="Convert O3 ppb to O3 nmol"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={\'e_state.Ts_C.[row_index]\': \'Ts_C\', \'lget(e_state.P\': \'row_index\'}; additional_inputs={}; state_inputs={\'state.canopy_layers.[iL].micro_met.micro_O3\': \'O3_ppb\'}; state_outputs={\'result\': "state.f\'canopy_layers.{iL}.micro_met.micro_O3_nmol_m3"}; args=[])')
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Ozone Dose Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
        GenericRepr('Process(func=calc_leaf_resistance_model; ptype=ProcessType.STANDARD; comment="Reset and setup Leaf Resistance Model"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_u for iL in range(nL)]\': \'u_per_layer\', \'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer\': \'leaf_gsto_per_layer\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.leaf_rmodel_O3"}; args=[])'),
        GenericRepr('Process(func=calc_leaf_resistance_model; ptype=ProcessType.STANDARD; comment="Reset and setup Leaf Resistance Model"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\', \'config.Land_Cover.parameters.[iLC].Lm\': \'Lm\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_u for iL in range(nL)]\': \'u_per_layer\', \'state.canopy_component_population.[iLC].\\n              .[iP].mean_gsto_per_layer\': \'leaf_gsto_per_layer\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.leaf_rmodel_O3"}; args=[])')
    ],
    [
        GenericRepr('Process(func=calc_fst_leaf; ptype=ProcessType.STANDARD; comment="Calculate the O3up (fst) 0_0"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_O3_nmol_m3 for iL in range(nL)]\': \'O3_nmol_m3\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rb\': \'Rb_l\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rsto\': \'Rsto_l\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rext\': \'Rext\', \'state.canopy_component_population.[iLC].[iP].mean_gsto_per_layer\': \'Gsto_l\', \'state.canopy_component_population.[iLC].[iP].fLAI_layer\': \'fLAI\', \'[state.canopy_component[iLC].leaf_pop_distribution.[iL].[iP].\\n            #    for iL in range(nL)]\': \'LAI_per_layer\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up"}; args=[])'),
        GenericRepr('Process(func=calc_fst_leaf; ptype=ProcessType.STANDARD; comment="Calculate the O3up (fst) 1_0"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_O3_nmol_m3 for iL in range(nL)]\': \'O3_nmol_m3\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rb\': \'Rb_l\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rsto\': \'Rsto_l\', \'state.canopy_component_population.[iLC].[iP].leaf_rmodel_O3.Rext\': \'Rext\', \'state.canopy_component_population.[iLC].[iP].mean_gsto_per_layer\': \'Gsto_l\', \'state.canopy_component_population.[iLC].[iP].fLAI_layer\': \'fLAI\', \'[state.canopy_component[iLC].leaf_pop_distribution.[iL].[iP].\\n            #    for iL in range(nL)]\': \'LAI_per_layer\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up"}; args=[])')
    ],
    [
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate O3up(fst)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day"}; args=[])'),
        GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="Accumulate O3up(fst)"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result\': "state.f\'canopy_component_population.{iLC}.{iP}.O3up_acc_day"}; args=[])')
    ],
    [
        GenericRepr('Process(func=calc_POD; ptype=ProcessType.STANDARD; comment="Calculate the Phytotoxic Ozone Dose"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Y\': \'Y\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result.POD_0\': "state.f\'canopy_component_population.{iLC}.{iP}.POD_0", \'result.POD_Y\': "state.f\'canopy_component_population.{iLC}.{iP}.POD_Y"}; args=[])'),
        GenericRepr('Process(func=calc_POD; ptype=ProcessType.STANDARD; comment="Calculate the Phytotoxic Ozone Dose"; gate=True; group=None; config_inputs={\'config.Land_Cover.parameters.[iLC].Y\': \'Y\'}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={\'result.POD_0\': "state.f\'canopy_component_population.{iLC}.{iP}.POD_0", \'result.POD_Y\': "state.f\'canopy_component_population.{iLC}.{iP}.POD_Y"}; args=[])')
    ],
    [
        GenericRepr('Process(func=calc_OT_leaf; ptype=ProcessType.STANDARD; comment="Calculate the OT accumulation"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\'}; parameters_inputs={}; external_state_inputs={\'e_state.is_daylight.[row_index]\': \'is_daylight\'}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_O3 for iL in range(nL)]\': \'micro_O3\', \'state.canopy_layer_component.0.[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.0.[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.prev_hour.canopy_component_population.[iLC].[iP].AOT_0\': \'AOT_0_prev\', \'state.prev_hour.canopy_component_population.[iLC].[iP].AOT_40\': \'AOT_40_prev\'}; state_outputs={\'result.OT_0\': "state.f\'canopy_component_population.{iLC}.{iP}.OT_0", \'result.OT_40\': "state.f\'canopy_component_population.{iLC}.{iP}.OT_40", \'result.AOT_0\': "state.f\'canopy_component_population.{iLC}.{iP}.AOT_0", \'result.AOT_40\': "state.f\'canopy_component_population.{iLC}.{iP}.AOT_40"}; args=[])'),
        GenericRepr('Process(func=calc_OT_leaf; ptype=ProcessType.STANDARD; comment="Calculate the OT accumulation"; gate=True; group=None; config_inputs={\'config.Land_Cover.nL\': \'nL\'}; parameters_inputs={}; external_state_inputs={\'e_state.is_daylight.[row_index]\': \'is_daylight\'}; additional_inputs={}; state_inputs={\'[state.canopy_layers[iL].micro_met.micro_O3 for iL in range(nL)]\': \'micro_O3\', \'state.canopy_layer_component.0.[iLC].gsto_params.f_phen\': \'f_phen\', \'state.canopy_layer_component.0.[iLC].gsto_params.leaf_f_phen\': \'leaf_f_phen\', \'state.prev_hour.canopy_component_population.[iLC].[iP].AOT_0\': \'AOT_0_prev\', \'state.prev_hour.canopy_component_population.[iLC].[iP].AOT_40\': \'AOT_40_prev\'}; state_outputs={\'result.OT_0\': "state.f\'canopy_component_population.{iLC}.{iP}.OT_0", \'result.OT_40\': "state.f\'canopy_component_population.{iLC}.{iP}.OT_40", \'result.AOT_0\': "state.f\'canopy_component_population.{iLC}.{iP}.AOT_0", \'result.AOT_40\': "state.f\'canopy_component_population.{iLC}.{iP}.AOT_40"}; args=[])')
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Soil Moisture Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="=== Carbon Allocation Processes ==="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
    ],
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="== Hourly Logging Processes =="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    [
        GenericRepr('Process(func=merge_logs; ptype=ProcessType.LOG; comment="Logging External Values"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
        GenericRepr('Process(func=merge_logs; ptype=ProcessType.LOG; comment="Logging Values"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'ERROR\': \'ERROR\'}; state_outputs={}; args=[])'),
        [
        ]
    ],
    GenericRepr('Process(func=set_value; ptype=ProcessType.STANDARD; comment="Copy State"; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={\'state\': \'state\'}; state_outputs={\'UNKNOWN\': \'UNKNOWN\'}; args=[])'),
    GenericRepr('Process(func=advance_time_step; ptype=ProcessType.TIME; comment=""; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])'),
    GenericRepr('Process(func=<lambda>; ptype=ProcessType.STANDARD; comment="===== End of Hourly Processes ====="; gate=True; group=None; config_inputs={}; parameters_inputs={}; external_state_inputs={}; additional_inputs={}; state_inputs={}; state_outputs={}; args=[])')
]

snapshots['test_hourly_processes Process_comments'] = [
    '===== Start of Hourly Processes (Hour: 0) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    'Set thermal time from external data',
    '===== Start of Daily Processes =====',
    'set day',
    '== Met Processes ==',
    'Calculate the effective temperature',
    'Calculate the effective temperature',
    'Calculate the day length (photoperiod)',
    '== Phenology Processes ==',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'Calculate the phyllochron',
    'Calculate the relative photoperiod',
    'Set plant is sown when dd > sowing_day',
    'Set plant has emerged when td > t_emerge or dd > emerge_day',
    'Get the difference between current td and td at Sowing(Vernalised if on)',
    'Get the difference between current td and td at emergence',
    'Set flag leaf has emerged when td or dd pass flag leaf emergence date',
    'Calculate the emergence rate',
    'Calculate the number of leaf populations that have emerged',
    'Set phenology stages',
    'Calculate the thermal time difference between leaf pop emergence and current td',
    'Get leaf phenology stage for flag leaf',
    'Get phenology stage for plant',
    'Define which populations are growing',
    'Calculate the phyllochron',
    'Calculate the relative photoperiod',
    'Set plant is sown when dd > sowing_day',
    'Set plant has emerged when td > t_emerge or dd > emerge_day',
    'Get the difference between current td and td at Sowing(Vernalised if on)',
    'Get the difference between current td and td at emergence',
    'Set flag leaf has emerged when td or dd pass flag leaf emergence date',
    'Calculate the emergence rate',
    'Calculate the number of leaf populations that have emerged',
    'Set phenology stages',
    'Calculate the thermal time difference between leaf pop emergence and current td',
    'Get leaf phenology stage for flag leaf',
    'Get phenology stage for plant',
    'Define which populations are growing',
    '== Carbon Allocation Processes ==',
    'Calculate the daily carbon allocation',
    'Calculate the daily carbon allocation',
    'Calculate the plant LAI from accumulated carbon',
    'Calculate the plant LAI from accumulated carbon',
    'Calculate the plant height from accumulated carbon',
    'Calculate the plant height from accumulated carbon',
    'reset daily carbon accumulators',
    '== Canopy Structure Processes ==',
    'Use height of primary land cover if height method is constant',
    'Calculate height of top of each layer as a fraction of total canopy height',
    'Calculate height of top of each layer as a fraction of total canopy height',
    'Calculate height of top of each layer as a fraction of total canopy height',
    'Get layer height as sum of layer depths below',
    'Get layer height as sum of layer depths below',
    'Get layer height as sum of layer depths below',
    '''Use primary land cover's estimate of total LAI and spread over
                        layers and LCs''',
    'Distribute LAI using constant fractions from config',
    'Calculate the distribution of LAI between land covers',
    'Calculate the distribution of LAI between land covers',
    'get layer LAI-weighted mean leaf width(Lm_LAI)',
    'Calc_SAI Estimate_total - LAI',
    'Spread single SAI value to layers and LCs',
    'get layer SAI_total',
    'Set leaf lai for single population',
    'Set leaf lai for single population',
    'Distribute lai between leaf populations',
    'Distribute lai between leaf populations',
    'Distribute lai between growing leaf populations using multiplicative method',
    'Distribute lai between growing leaf populations using multiplicative method',
    'Convert lai distribution to pop fractions',
    'Convert lai distribution to pop fractions',
    'calculate measured wind canopy displacement parameters',
    '== Soil Moisture Processes ==',
    'Accumulate precipitation',
    '== Fst Processes ==',
    'Accumulate O3up(fst)',
    'Accumulate O3up(fst)',
    'Store the O3up_acc_day from previous day and reset current day to 0.',
    'Store the O3up_acc_day from previous day and reset current day to 0.',
    '===== End of Daily Processes =====',
    'Disabled - Nothing to do',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Set constant wind speed at each layer',
    'Set constant wind speed at each layer',
    'Use air temperature',
    'Use air temperature',
    'Use air temperature',
    'Use air temperature',
    'Use air temperature',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Calculate gsto - multiplicative',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale mean gsto up to bulk gsto',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    'Calculate gsto - multiplicative',
    'Calculate gsto - multiplicative',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale mean gsto up to bulk gsto',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    'Convert O3 ppb to O3 nmol',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Calculate the O3up (fst) 1_0',
    'Accumulate O3up(fst)',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes ====='
]

snapshots['test_all_processes_first_24_hours Process_comments'] = [
    '===== Start of Hourly Processes (Hour: 0) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '===== Start of Daily Processes =====',
    'set day',
    '== Met Processes ==',
    'Calculate the effective temperature',
    'Calculate the day length (photoperiod)',
    '== Phenology Processes ==',
    'f_phen supplied (or left at default value of 1.0)',
    'calculate leaf_f_phen_method - disabled',
    'Calculate the phyllochron',
    'Calculate the relative photoperiod',
    'Set plant is sown when dd > sowing_day',
    'Set plant has emerged when td > t_emerge or dd > emerge_day',
    'Get the difference between current td and td at Sowing(Vernalised if on)',
    'Get the difference between current td and td at emergence',
    'Set flag leaf has emerged when td or dd pass flag leaf emergence date',
    'Calculate the emergence rate',
    'Calculate the number of leaf populations that have emerged',
    'Set phenology stages',
    'Calculate the thermal time difference between leaf pop emergence and current td',
    'Get leaf phenology stage for flag leaf',
    'Get phenology stage for plant',
    'Define which populations are growing',
    '== Carbon Allocation Processes ==',
    '== Canopy Structure Processes ==',
    'Use height of primary land cover if height method is constant',
    'Calculate height of top of each layer as a fraction of total canopy height',
    'Get layer height as sum of layer depths below',
    '''Use primary land cover's estimate of total LAI and spread over
                        layers and LCs''',
    'Distribute LAI using constant fractions from config',
    'Calculate the distribution of LAI between land covers',
    'get layer LAI-weighted mean leaf width(Lm_LAI)',
    'Calc_SAI Estimate_total - LAI',
    'Spread single SAI value to layers and LCs',
    'get layer SAI_total',
    'Set leaf lai for single population',
    'Distribute lai between leaf populations',
    'Distribute lai between growing leaf populations using multiplicative method',
    'Convert lai distribution to pop fractions',
    'calculate measured wind canopy displacement parameters',
    '== Soil Moisture Processes ==',
    'Accumulate precipitation',
    'Daily soil water content update from accumulated             Penman-Monteith values',
    'P-M - soil moisture calc',
    'reset penman monteith daily accumulators to 0',
    '== Fst Processes ==',
    'Accumulate O3up(fst)',
    'Store the O3up_acc_day from previous day and reset current day to 0.',
    '===== End of Daily Processes =====',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 1) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 2) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 3) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 4) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 5) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 6) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 7) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 8) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 9) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 10) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 11) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 12) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 13) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 14) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 15) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 16) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 17) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 18) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 19) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 20) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 21) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 22) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes =====',
    '===== Start of Hourly Processes (Hour: 23) =====',
    'Set Hour',
    'Set data row index',
    'Set thermal time from external data',
    '=== Met Processes ===',
    'Accumulate daily temperature',
    'Accumulate precipitation',
    'calculate PAR_sun_shade using Farquhar 1997 method',
    'Estimate sunlit LAI fractions',
    'Calculate ustar_ref and monin obukhov length',
    'Set ustar_ref to external input',
    'Calculate ustar_ref using simple method',
    'Calculate ustar_ref using simple method',
    'Calculate estimated windspeed at canopy',
    'Set constant wind speed at each layer',
    'Use air temperature',
    '=== Gsto Setup Processes ===',
    'V_cmax_25 and J_max_25 supplied as constant',
    'f_VPD method - disabled',
    'f_SWP_method - Disabled',
    'f_O3 method - disabled',
    'Calculate g_bv for photosynthesis',
    '=== Gsto Processes ===',
    'Calculate gsto - multiplicative',
    'Scale mean gsto up to bulk gsto',
    'Scale bulk gsto to canopy gsto',
    'Scale mean gsto up to bulk gsto',
    '=== Ozone Deposition Processes ===',
    'Reset and Calculate the resistance model for O3 over the target canopy',
    'Vd calculation duplicated here just for comparison purposes',
    'Calculate Top Layer Canopy ozone',
    'Calculate Ozone concentration for other layers',
    'Convert O3 ppb to O3 nmol',
    '=== Ozone Dose Processes ===',
    'Reset and setup Leaf Resistance Model',
    'Calculate the O3up (fst) 0_0',
    'Accumulate O3up(fst)',
    'Calculate the Phytotoxic Ozone Dose',
    'Calculate the OT accumulation',
    '=== Soil Moisture Processes ===',
    'Adapt multi-layer O3 resistance model to single-layer H2O resistance',
    'Calculate the total resistance in H2O resistance model',
    'Is soil evaporation blocked?',
    'Calculate PEt RSTO',
    'Hourly Penman-Monteith calculations for evaporation and transpiration',
    '=== Carbon Allocation Processes ===',
    '== Hourly Logging Processes ==',
    'Logging External Values',
    'Logging Values',
    'Copy State',
    'advance_time_step',
    '===== End of Hourly Processes ====='
]
